{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","username","ecosystem","id","twitterurl","className","alt","src","href","CardList","robots","cardsArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAqBeA,EAlBF,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,GAEhCC,EAAU,gCAA4BH,GAC5C,OACI,sBAAKI,UAAU,sDAAf,UACI,qBAAKC,IAAI,MAAMC,IAAG,+BAA0BJ,EAA1B,cAClB,gCACI,6BAAKH,IACL,gCACI,qBAAKM,IAAI,UAAUD,UAAU,cAAcE,IAAI,wEAC/C,mBAAGC,KAAMJ,EAAT,SAAsBH,IACtB,mBAAGI,UAAU,MAAb,SAAoBH,cCKzBO,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAaD,EAAOE,KAAI,SAACC,EAAKC,GAChC,OAAQ,cAAC,EAAD,CAEJX,GAAIO,EAAOI,GAAGX,GACdH,KAAMU,EAAOI,GAAGd,KAChBC,SAAUS,EAAOI,GAAGb,SACpBC,UAAWQ,EAAOI,GAAGZ,WAJhBQ,EAAOI,GAAGX,OAMvB,OACI,8BACKQ,KCAEI,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKX,UAAU,MAAf,SACI,uBACAA,UAAU,mCAAmCY,KAAK,SAClDC,YAAY,mBACZC,SAAUH,OCEPI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WAEI,GADmBG,KAAKJ,MAAjBC,SAEH,OAAO,6D,GAfSK,aCiDbC,G,wDA1CX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAf1C,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAEjBG,QAAQC,IAAI,eANF,E,qDASd,WAAqB,IAAD,OAChBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACtBF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAAEvB,OAAQqC,S,oBAQ/C,WACI,MAA+Bf,KAAKJ,MAA5BlB,EAAR,EAAQA,OAAQ4B,EAAhB,EAAgBA,YACVU,EAAiBtC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAMlD,KAAKmD,cAAcC,SAASd,EAAYa,kBAGzD,OAAQzC,EAAO2C,OAGH,sBAAKhD,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQsC,WAP1C,6C,GA5BUd,cCIHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ce163508.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({name, username, ecosystem, id}) => {\r\n    // const {name,email, id} = props;\r\n    const twitterurl = `https:www.twitter.com/${username}`;\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='pic' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <div >\r\n                    <img alt='twitter' className='twittericon' src='https://logos-world.net/wp-content/uploads/2020/04/Twitter-Logo.png'/>\r\n                    <a href={twitterurl}>{username}</a>\r\n                    <p className='ttu'>{ecosystem}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardsArray = robots.map((user,i) => {\r\n        return (<Card\r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            username={robots[i].username}\r\n            ecosystem={robots[i].ecosystem}/>);\r\n    });\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue' type='search' \r\n            placeholder='Search CryptoBot'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '570px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        const {hasError} = this.state;\r\n        if (hasError) {\r\n            return <h1>Oops. That is not good.</h1>\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n// Smart component because it has state. Smart components tend to have the class syntax.\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n        console.log('constructor');\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n            .then(users => this.setState({ robots: users})\r\n        );\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        // if large amount of users and gonna take time, do this if statement.\r\n        return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        (\r\n                    <div className='tc'>\r\n                        <h1>RoboFriends</h1>\r\n                        <SearchBox searchChange={this.onSearchChange}/>\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={filteredRobots}/>\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default App;\r\n\r\n// STATE = an object that describes your application. example: robots.\r\n// PROPS = things that come out of STATE\r\n// parent feeds STATE into a child component and as soon as a child component receives the STATE, it a property (prop).\r\n// Child component can never change the property.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// {robots} because it doesn't have export default which means that it can return multiple things.\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}